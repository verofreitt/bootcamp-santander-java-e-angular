//tipos primitivos: boolean, number, string
let ligado: boolean = false;
let nome: string = "vevs";
let idade: number = 30;
let altura: number = 1.9;

//tipos especiais: null e undefined
let nulo: null = null;
let indefinido: undefined = undefined;

//tipos abrangentes: any e void
let retorno: void;
let retornoView: any = false;

//objeto - sem previsibilidade
let produto: object = {
  /* name: "vevs", */
  cidade: "sp",
  idade: 30,
};

//objeto tipado - comm previsibilidade
type produtoLoja = {
  nome: string;
  preco: number;
  unidade: number;
};

let meuProduto: produtoLoja = {
  nome: "Tenis",
  preco: 89.99,
  unidade: 5,
};

//arrays
let dados: string[] = ["vevs", "chan", "davigado"];
let dados2: Array<string> = ["vevs", "chan", "davigado"];

let infos: (string | number)[] = ["vevs", 25];

// tuplas
let boleto: [string, number, number] = ["agua conta", 199.90, 8347239]

//arrays metodos
dados.pop();

//Datas
let aniversario: Date = new Date("2023-08-30 10:55");
console.log(aniversario.toString());

//funções
function addNumber(x: number, y: number): number {
    return x + y;
}

function addToHello(name: string): string {
    return `Hello ${name}`;
} 

function CallToPhone(phone: number | string): number | string {
    return phone;
}

async function getDatabase(id: number): Promise<string> {
    return "vevs";
}

console.log(CallToPhone(3273627362))

let soma: number = addNumber(4, 7);
console.log(soma);
console.log(addToHello("vevs"));


//interfaces (type x interface)
type robot = {
    id: number,
    name: string,
}

interface robot2 {
    id: number,
    name: string,
}

const bot: robot2 = {
    id: 1,
    name: "megaman"
}

class Pessoa implements robot {
    id: number;
    name: string;

}

class Pessoa implements robot2 {
    id: number;
    name: string;

    constructor(id: number, name: string){
        this.id = id
        this.name = name
    }
    sayHello(): string {
        return "hello";
    }
}

const p = new Pessoa(1, "gustman");

//classes

//data modifiers: puplic, private e protected

class Character {
    private name: string;
    stregth: number;
    skill: number;

    constructor(name: string, stregth: number, skill: number) {
        this.name = name
        this.stregth = stregth
        this.skill = skill
    }

    attack(): void {
        console.log(`Attack with ${this.stregth} points`)
    }
}


//subclass
class Magician extends Character {
    magicPoints: number
    constructor(name: string, stregth: number, skill: number, magicPoints: number) {
        super(name, stregth, skill)
        this.magicPoints = magicPoints
    }
}

const p1 = new Character(10, 98)
p1.attack()
const p2 = new Magician("Mago", 09, 30, 100)

//generics
function concatArray<T>(...itens: T[]):T[] {
    return new Array().concat(...itens);
}

const numArray = concatArray<number[]>([1, 5], [3])
const stgArray = concatArray<string[]>(["vevs", "goku"], ["vegeta"])

//decorators
function exibirNome(target: any) {
    console.log(target)
}

@exibirNome
class Funcionario {}

@exibirNome
class Quincas {}

//decorators
function apiVersion(version: string) {
    return(target: any) => {
        Object.assign(target.prototype, {__version: version});
    };
}

@apiVersion("1.10")
class Api{}

const api = new Api();
console.log(api.__version)

//decorators
function apiVersion(version: string) {
    return(target: any) => {
        Object.assign(target.prototype, {__version: version});
    };
}


//attribute decorator
function minLength(length: number) {
    return (target: any, key: string) => {
        let _value = target[key]

        const getter = () => _value
        const setter = (value: string) => {
            if(value.length < length) {
                throw new Error(`Tamanho menor que ${length}`)
            } else {
                _value = value;
            }
        }

        Object.defineProperty(target, key, {
            get: getter,
            set: setter,
        })
    }
}


class Api {
    @minLength(3)
    name:string

    constructor(name: string){
        this.name = name;
    }
}

const api = new Api("avbf");
console.log(api.name)